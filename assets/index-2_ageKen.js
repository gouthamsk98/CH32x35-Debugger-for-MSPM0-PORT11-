var b=Object.defineProperty;var v=(s,e,r)=>e in s?b(s,e,{enumerable:!0,configurable:!0,writable:!0,value:r}):s[e]=r;var o=(s,e,r)=>v(s,typeof e!="symbol"?e+"":e,r);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))n(t);new MutationObserver(t=>{for(const i of t)if(i.type==="childList")for(const u of i.addedNodes)u.tagName==="LINK"&&u.rel==="modulepreload"&&n(u)}).observe(document,{childList:!0,subtree:!0});function r(t){const i={};return t.integrity&&(i.integrity=t.integrity),t.referrerPolicy&&(i.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?i.credentials="include":t.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function n(t){if(t.ep)return;t.ep=!0;const i=r(t);fetch(t.href,i)}})();var E=(s=>(s.invaid_frame="data recived from usb frame is invaid",s.operation_failed="the current opertion failed",s.read_timeout="reder has timeout",s.unknown_err="unkown error",s))(E||{});class L{static isOk(e){return e.type==="Ok"}static payload(e){return e.type==="Ok"?e.data:new Uint8Array}static async fromRaw(e){const r=l.checkSum(e,e.length);if(e[0]!==249||e[1]!==245||e[e.length-1]!==r)return{type:"Err",code:E.invaid_frame,data:e};const n=e[7];return n==l.ACK&&e[8]==l.OK?{type:"Ok",data:e}:n==l.ACK&&e[8]==l.FAIL?{type:"Err",code:E.operation_failed,data:e}:{type:"Err",code:E.unknown_err,data:e}}}const f=class f{constructor(e){o(this,"device");this.device=e}static debugLog(e){const r=document.querySelector("#console");r.value+=e+`
`,r.scrollTop=r.scrollHeight}static async scanDevices(){const e=[{vendorId:17224,productId:21984},{vendorId:6790,productId:21984}],n=(await navigator.usb.getDevices()).filter(t=>e.some(i=>t.vendorId===i.vendorId&&t.productId===i.productId));return console.debug(`Found ${n.length} WCH ISP USB devices`),n.length}static async openNth(e){const n=(await navigator.usb.getDevices())[e];if(!n)throw new Error(`No WCH ISP USB device found (4348:55e0 or 1a86:55e0 device not found at index #${e})`);console.debug(`Found USB Device ${n.productName}`),await n.open(),n.configuration===null&&await n.selectConfiguration(1);const t=n.configuration;let i=!1,u=!1;if(t){console.log("config",t);for(const d of t.interfaces){console.log(d);for(const a of d.alternate.endpoints)a.endpointNumber===this.ENDPOINT_OUT&&(i=!0),a.endpointNumber===this.ENDPOINT_IN&&(u=!0)}}if(!(i&&u))throw new Error("USB Endpoints not found");return await n.claimInterface(0),new f(n)}static async openAny(){return this.openNth(0)}async sendRaw(e){return await this.device.transferOut(f.ENDPOINT_OUT,e)}async recvRaw(){const e=await this.device.transferIn(f.ENDPOINT_IN,64);if(e.data)return new Uint8Array(e.data.buffer);throw new Error("Failed to receive data")}async recv(){const e=await this.device.transferIn(f.ENDPOINT_IN,64);return e.data?(console.log(e.data),L.fromRaw(new Uint8Array(e.data.buffer))):{type:"Err",code:E.read_timeout}}};o(f,"ENDPOINT_OUT",1),o(f,"ENDPOINT_IN",2),o(f,"USB_TIMEOUT_MS",5e3),o(f,"MAX_PACKET_SIZE",64),o(f,"SECTOR_SIZE",1024),o(f,"DEFAULT_TRANSPORT_TIMEOUT_MS",1e3);let A=f;const c=class c extends A{constructor(r){super(r);o(this,"FLASH_ADDRESS",0);o(this,"BSL_ENABLED",!1);o(this,"START",1);o(this,"ERASE",2);o(this,"PAGE_ERASE",3);o(this,"WRITE",4);o(this,"READ",5);o(this,"VERIFY",6);o(this,"START_APP",7);o(this,"EXIT",8);o(this,"DATA",10);o(this,"FOR_WRITE",17);o(this,"FOR_READ",34);o(this,"WRITE_OK",8)}static checkSum(r,n){console.log("data is",r,n);let t=0;for(let i=2;i<n-1;i++)t+=r[i];return t=t&255,t=~t&255,t}frameToUSB(r,n,t,i){const u=i+9,d=i+2,a=new Uint8Array(u);return a[0]=249,a[1]=255,a[2]=d>>24&255,a[3]=d>>16&255,a[4]=d>>8&255,a[5]=d&255,a[6]=r,a[7]=n,a.set(t,8),a[a.length-1]=c.checkSum(a,a.length-1),a}async enableBSL(){c.debugLog("Enabling Bootloader ...");const r=this.frameToUSB(this.FOR_WRITE,this.START,new Uint8Array,0);for(console.log("frame is 1",r),await this.sendRaw(r);;){const n=await this.recv();if(console.log("res 1",n),n.type=="Ok"){this.BSL_ENABLED=!0;break}c.debugLog("..."),await new Promise(t=>setTimeout(t,100))}}intelHexToUint8Array(r){const n=r.trim().split(`
`),t=[];return n.forEach(i=>{if(i.startsWith(":")){const u=parseInt(i.substr(1,2),16),d=9,a=d+u*2;for(let h=d;h<a;h+=2)t.push(parseInt(i.substr(h,2),16))}}),new Uint8Array(t)}async eraseFlash(){this.BSL_ENABLED||await this.enableBSL();const r=this.frameToUSB(this.FOR_WRITE,this.ERASE,new Uint8Array,0);this.sendRaw(r),(await this.recv()).type=="Ok"&&c.debugLog("Erase Completed")}async startApp(){const r=this.frameToUSB(this.FOR_WRITE,this.START_APP,new Uint8Array,0);for(await this.sendRaw(r);;){await new Promise(t=>setTimeout(t,100));const n=await this.recv();if(console.log("res 1",n),n.type=="Ok"){this.BSL_ENABLED=!1,c.debugLog("App Started");break}}}async flash(r){await this.enableBSL(),c.debugLog("Flashing started ...");const n=this.intelHexToUint8Array(r),t=n.length,i=new Uint8Array([this.FLASH_ADDRESS>>24&255,this.FLASH_ADDRESS>>16&255,this.FLASH_ADDRESS>>8&255,this.FLASH_ADDRESS&255,t>>24&255,t>>16&255,t>>8&255,t&255]),u=this.frameToUSB(this.FOR_WRITE,this.WRITE,i,8),d=await this.sendRaw(u);console.log("data transfer is",u,d.bytesWritten,d.status);let a=d.bytesWritten;const h=new Uint8Array(t);h.set(n.subarray(0,t));const I=64;let T=t,p=0;for(;T>0;){const y=h.subarray(p,p+I),g=await this.sendRaw(y);console.log("data transfer is",y,g.bytesWritten,g.status),a=g.bytesWritten,T-=a,p+=a,c.debugLog(`writen bytes ${p} out of ${t} bytes`)}for(;;){await new Promise(g=>setTimeout(g,0));const y=await this.recv();if(console.log("res 1",y),y.type=="Ok"){c.debugLog("Flashed successfully"),c.debugLog("Restart the device (reconnect).");break}}}};o(c,"VENDOR_ID",25161),o(c,"PRODUCT_ID",28721),o(c,"CDC_DATA_INTERFACE",0),o(c,"ACK",9),o(c,"OK",1),o(c,"FAIL",0);let l=c,m=!1,w,S;const R=[{vendorId:25161,productId:28721}];function D(s){s.addEventListener("click",()=>{navigator.usb.requestDevice({filters:R}).then(async e=>{w=new l(e),l.openNth(0),l.debugLog("Connected"),m=!m,s.innerHTML="Disconnect"}).catch(e=>{console.error(e),s.innerHTML="Connect"})})}function O(s){s.addEventListener("click",async()=>{if(!m){l.debugLog("Please Connect First");return}s.innerHTML="Erasing...",await w.eraseFlash(),s.innerHTML="Erase"})}function F(s){s.addEventListener("click",async()=>{if(!m){l.debugLog("Please Connect First");return}if(!S){l.debugLog("Please upload a .Hex file first");return}s.innerHTML="Flashing...",await w.flash(S),s.innerHTML="Flash"})}function N(s){return new Promise((e,r)=>{const n=new FileReader;n.onload=()=>e(n.result),n.onerror=r,n.readAsText(s)})}function P(s){s.addEventListener("change",async e=>{const r=e.target.files[0];r&&r.name.endsWith(".hex")?(S=await N(r),console.log(S)):alert("Please upload a valid .hex file")})}document.querySelector("#app").innerHTML=`
  <div>
    <h1>Port11 ch32x35_debugger</h1>
    <button id="connect" type="button">Connect</button
      <input type="file" id="myfile" name="myfile" accept=".hex">
      <input type="file" id="myfile" name="myfile"><br><br>
      <button id="erase" type="button">Erase</button>
      <button id="flash" type="button">Flash</button>
      <textarea id="console" rows="15" cols="50" readonly></textarea>
  </div>
`;D(document.querySelector("#connect"));O(document.querySelector("#erase"));F(document.querySelector("#flash"));P(document.querySelector("#myfile"));
