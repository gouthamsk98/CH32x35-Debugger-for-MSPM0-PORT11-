var T=Object.defineProperty;var v=(r,e,i)=>e in r?T(r,e,{enumerable:!0,configurable:!0,writable:!0,value:i}):r[e]=i;var o=(r,e,i)=>v(r,typeof e!="symbol"?e+"":e,i);(function(){const e=document.createElement("link").relList;if(e&&e.supports&&e.supports("modulepreload"))return;for(const t of document.querySelectorAll('link[rel="modulepreload"]'))n(t);new MutationObserver(t=>{for(const s of t)if(s.type==="childList")for(const f of s.addedNodes)f.tagName==="LINK"&&f.rel==="modulepreload"&&n(f)}).observe(document,{childList:!0,subtree:!0});function i(t){const s={};return t.integrity&&(s.integrity=t.integrity),t.referrerPolicy&&(s.referrerPolicy=t.referrerPolicy),t.crossOrigin==="use-credentials"?s.credentials="include":t.crossOrigin==="anonymous"?s.credentials="omit":s.credentials="same-origin",s}function n(t){if(t.ep)return;t.ep=!0;const s=i(t);fetch(t.href,s)}})();var g=(r=>(r.invaid_frame="data recived from usb frame is invaid",r.operation_failed="the current opertion failed",r.read_timeout="reder has timeout",r.unknown_err="unkown error",r))(g||{});class I{static isOk(e){return e.type==="Ok"}static payload(e){return e.type==="Ok"?e.data:new Uint8Array}static async fromRaw(e){const i=u.checkSum(e,e.length);if(e[0]!==249||e[1]!==245||e[e.length-1]!==i)return{type:"Err",code:g.invaid_frame,data:e};const n=e[7];return n==u.ACK&&e[8]==u.OK?{type:"Ok",data:e}:n==u.ACK&&e[8]==u.FAIL?{type:"Err",code:g.operation_failed,data:e}:{type:"Err",code:g.unknown_err,data:e}}}const d=class d{constructor(e){o(this,"device");this.device=e}static debugLog(e){const i=document.querySelector("#console");i.value+=e+`
`,i.scrollTop=i.scrollHeight}static async scanDevices(){const e=[{vendorId:17224,productId:21984},{vendorId:6790,productId:21984}],n=(await navigator.usb.getDevices()).filter(t=>e.some(s=>t.vendorId===s.vendorId&&t.productId===s.productId));return console.debug(`Found ${n.length} WCH ISP USB devices`),n.length}static async openNth(e){const n=(await navigator.usb.getDevices())[e];if(!n)throw new Error(`No WCH ISP USB device found (4348:55e0 or 1a86:55e0 device not found at index #${e})`);console.debug(`Found USB Device ${n.productName}`),await n.open(),n.configuration===null&&await n.selectConfiguration(1);const t=n.configuration;let s=!1,f=!1;if(t){console.log("config",t);for(const l of t.interfaces){console.log(l);for(const a of l.alternate.endpoints)a.endpointNumber===this.ENDPOINT_OUT&&(s=!0),a.endpointNumber===this.ENDPOINT_IN&&(f=!0)}}if(!(s&&f))throw new Error("USB Endpoints not found");return await n.claimInterface(0),new d(n)}static async openAny(){return this.openNth(0)}async disconnect(){this.device&&this.device.close()}async sendRaw(e){return await this.device.transferOut(d.ENDPOINT_OUT,e)}async recvRaw(){const e=await this.device.transferIn(d.ENDPOINT_IN,d.MAX_PACKET_SIZE);if(e.data)return new Uint8Array(e.data.buffer);throw new Error("Failed to receive data")}async recv(){console.log("waiting for data...");const e=await this.device.transferIn(d.ENDPOINT_IN,d.MAX_PACKET_SIZE);return e.data?(console.log(e.data),I.fromRaw(new Uint8Array(e.data.buffer))):{type:"Err",code:g.read_timeout}}};o(d,"ENDPOINT_OUT",1),o(d,"ENDPOINT_IN",2),o(d,"USB_TIMEOUT_MS",5e3),o(d,"MAX_PACKET_SIZE",64),o(d,"SECTOR_SIZE",1024),o(d,"DEFAULT_TRANSPORT_TIMEOUT_MS",1e3),o(d,"enableLog",!0);let A=d;const c=class c extends A{constructor(i){super(i);o(this,"FLASH_ADDRESS",0);o(this,"BSL_ENABLED",!1);o(this,"START",1);o(this,"ERASE",2);o(this,"PAGE_ERASE",3);o(this,"WRITE",4);o(this,"READ",5);o(this,"VERIFY",6);o(this,"START_APP",7);o(this,"EXIT",8);o(this,"DATA",10);o(this,"FOR_WRITE",17);o(this,"FOR_READ",34);o(this,"WRITE_OK",8)}static checkSum(i,n){console.log("data is",i,n);let t=0;for(let s=2;s<n-1;s++)t+=i[s];return t=t&255,t=~t&255,t}frameToUSB(i,n,t,s){const f=s+9,l=s+2,a=new Uint8Array(f);return a[0]=249,a[1]=255,a[2]=l>>24&255,a[3]=l>>16&255,a[4]=l>>8&255,a[5]=l&255,a[6]=i,a[7]=n,a.set(t,8),a[a.length-1]=c.checkSum(a,a.length-1),a}async enableBSL(){c.debugLog("Enabling Bootloader ...");const i=this.frameToUSB(this.FOR_WRITE,this.START,new Uint8Array,0);for(console.log("frame is 1",i),await this.sendRaw(i);;){const n=await this.recv();if(console.log("res 1",n),n.type=="Ok"){this.BSL_ENABLED=!0,c.debugLog("BSL enabled");break}else n.type=="Err"&&n.code==g.operation_failed&&(c.debugLog(n.code),c.debugLog("Reconnect the device"));c.debugLog("..."),await new Promise(t=>setTimeout(t,0))}}intelHexToUint8Array(i){const n=i.trim().split(`
`),t=[];return n.forEach(s=>{if(s.startsWith(":")){const f=parseInt(s.substr(1,2),16),l=9,a=l+f*2;for(let p=l;p<a;p+=2)t.push(parseInt(s.substr(p,2),16))}}),new Uint8Array(t)}async eraseFlash(){this.BSL_ENABLED||await this.enableBSL();const i=this.frameToUSB(this.FOR_WRITE,this.ERASE,new Uint8Array,0);this.sendRaw(i),(await this.recv()).type=="Ok"&&c.debugLog("Erase Completed")}async startApp(){this.BSL_ENABLED&&c.debugLog("Disabling BSL mode ...");const i=this.frameToUSB(this.FOR_WRITE,this.START_APP,new Uint8Array,0);for(await this.sendRaw(i);;){await new Promise(t=>setTimeout(t,0));const n=await this.recv();if(n.type=="Ok"){this.BSL_ENABLED=!1,c.debugLog("App Started");break}else n.type=="Err"&&n.code==g.operation_failed&&c.debugLog(n.code)}}async flash(i){await this.enableBSL(),c.debugLog("Flashing started ...");const n=this.intelHexToUint8Array(i),t=n.length,s=new Uint8Array([this.FLASH_ADDRESS>>24&255,this.FLASH_ADDRESS>>16&255,this.FLASH_ADDRESS>>8&255,this.FLASH_ADDRESS&255,t>>24&255,t>>16&255,t>>8&255,t&255]),f=this.frameToUSB(this.FOR_WRITE,this.WRITE,s,8),l=await this.sendRaw(f);console.log("data transfer is",f,l.bytesWritten,l.status);let a=l.bytesWritten;const p=new Uint8Array(t);p.set(n.subarray(0,t));const w=64;let m=t,L=0;for(;m>0;){const h=p.subarray(L,L+w),S=await this.sendRaw(h);console.log("data transfer is",h,S.bytesWritten,S.status),a=S.bytesWritten,m-=a,L+=a,c.debugLog(`writen bytes ${L} out of ${t} bytes`)}for(;;){await new Promise(S=>setTimeout(S,0));const h=await this.recv();if(console.log("res 1",h),h.type=="Ok"){c.debugLog("Flashed successfully"),c.debugLog("Restart the device (reset).");break}else if(h.type=="Err"&&h.code==g.operation_failed){c.debugLog(h.code);break}}}};o(c,"VENDOR_ID",25161),o(c,"PRODUCT_ID",28721),o(c,"CDC_DATA_INTERFACE",0),o(c,"ACK",9),o(c,"OK",1),o(c,"FAIL",0);let u=c,y=!1,E,b;const R=[{vendorId:25161,productId:28721}];function D(r){r.addEventListener("click",()=>{if(y&&E){E.disconnect(),u.debugLog("Device disconnected"),r.innerHTML="Connect",y=!1;return}navigator.usb.requestDevice({filters:R}).then(async e=>{E=new u(e),await u.openNth(0),u.debugLog("Device connected"),E.enableBSL(),y=!y,r.innerHTML="Disconnect"}).catch(e=>{console.error(e),r.innerHTML="Connect"})})}function O(r){r.addEventListener("click",async()=>{if(!y){u.debugLog("Please Connect First");return}r.innerHTML="Erasing...",await E.eraseFlash(),r.innerHTML="Erase"})}function F(r){r.addEventListener("click",async()=>{if(!y){u.debugLog("Please Connect First");return}if(!b){u.debugLog("Please upload a .Hex file first");return}r.innerHTML="Flashing...",await E.flash(b),r.innerHTML="Flash"})}function N(r){return new Promise((e,i)=>{const n=new FileReader;n.onload=()=>e(n.result),n.onerror=i,n.readAsText(r)})}function P(r){r.addEventListener("change",async e=>{const i=e.target.files[0];i&&i.name.endsWith(".hex")?(b=await N(i),console.log(b)):alert("Please upload a valid .hex file")})}function B(r){r.addEventListener("click",async()=>{if(!y){u.debugLog("Please Connect First");return}r.innerHTML="Resting...",await E.startApp(),r.innerHTML="Reset"})}document.querySelector("#app").innerHTML=`
  <div>
    <h1>Port11 ch32x35_debugger</h1>
    <h2>Only support with Chrome Browser</h2>
    <button id="connect" type="button">Connect</button
      <input type="file" id="myfile" name="myfile" accept=".hex">
      <input type="file" id="myfile" name="myfile"><br><br>
      <button id="erase" type="button">Erase</button>
      <button id="flash" type="button">Flash</button>
      <button id="reset" type="button">Reset</button>
      <textarea id="console" rows="15" cols="50" readonly></textarea>
  </div>
`;D(document.querySelector("#connect"));O(document.querySelector("#erase"));F(document.querySelector("#flash"));P(document.querySelector("#myfile"));B(document.querySelector("#reset"));
